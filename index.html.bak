<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>直聘-H5原型</title>
    <style>
        /* CSS Variables - The New Visual Identity */
        :root {
            --primary-color: #3182CE; /* A more professional blue */
            --primary-light: #EBF8FF;
            --accent-color: #DD6B20; /* For salaries and highlights */
            --text-primary: #2D3748;
            --text-secondary: #718096;
            --background-color: #F7FAFC;
            --card-background: #FFFFFF;
            --border-color: #E2E8F0;
            --danger-color: #E53E3E;
            --success-color: #38A169;
        }

        /* Global Reset & Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent; /* Remove tap highlight on mobile */
        }
        html, body {
            height: 100%;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            background-color: var(--background-color);
            color: var(--text-primary);
            font-size: 16px;
            line-height: 1.5;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        /* Page Container */
        .page {
            display: none;
            flex-direction: column;
            height: 100%;
            width: 100%;
            position: absolute;
            top: 0;
            left: 0;
            background-color: var(--background-color);
        }
        .page.active {
            display: flex;
        }

        /* --- STAGE 1: MAIN PAGE BEAUTIFICATION --- */

        /* Header & Tabs */
        #main-page header {
            background-color: var(--card-background);
            padding: 10px 0;
            border-bottom: 1px solid var(--border-color);
            position: sticky;
            top: 0;
            width: 100%;
            z-index: 100;
        }
        .tabs {
            display: flex;
            justify-content: space-around;
            position: relative;
        }
        .tab-button {
            padding: 10px 15px;
            background-color: transparent;
            color: var(--text-secondary);
            border: none;
            cursor: pointer;
            font-size: 1em;
            font-weight: 500;
            position: relative;
            transition: color 0.3s;
        }
        .tab-button.active {
            color: var(--primary-color);
            font-weight: 600;
        }
        .tab-button::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 0;
            height: 3px;
            background-color: var(--primary-color);
            border-radius: 2px;
            transition: width 0.3s ease-in-out;
        }
        .tab-button.active::after {
            width: 40%;
        }

        /* Main Content Area */
        main {
            flex-grow: 1;
            overflow-y: auto;
            padding: 20px 15px;
        }
        .content-view {
            display: none;
        }
        .content-view.active {
            display: block;
        }

        /* Card Base Style */
        .card, .plaza-card {
            background-color: var(--card-background);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 15px;
            border: 1px solid var(--border-color);
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.05);
            transition: box-shadow 0.3s, transform 0.2s;
        }
        .card:active, .plaza-card:active {
             transform: scale(0.98);
             box-shadow: 0 4px 12px 0 rgba(0, 0, 0, 0.1);
        }

        /* Job/Talent Card Specifics */
        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 8px;
        }
        .card-title {
            font-size: 1.1em;
            font-weight: 600;
            color: var(--text-primary);
        }
        .card-salary {
            font-size: 1.1em;
            font-weight: 600;
            color: var(--accent-color);
            flex-shrink: 0;
            margin-left: 10px;
        }
        .card-company, .card-meta {
            font-size: 0.9em;
            color: var(--text-secondary);
            margin-bottom: 15px;
        }
        .card-tags, .plaza-card .tags {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }
        .card-tags .tag, .plaza-card .tags .tag {
            background-color: var(--primary-light);
            color: var(--primary-color);
            font-weight: 500;
            font-size: 0.8em;
            padding: 4px 10px;
            border-radius: 20px;
        }
        
        /* Plaza Card Specifics */
        .plaza-card .name {
            font-weight: 600;
            font-size: 1.1em;
            margin-bottom: 8px;
        }
        .plaza-card .text {
            line-height: 1.6;
            margin-bottom: 15px;
            color: var(--text-primary);
        }
        .plaza-card .actions {
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid var(--border-color);
            display: flex;
            justify-content: flex-end;
            gap: 25px;
        }
        .plaza-card .actions .action-btn {
            background: none;
            border: none;
            cursor: pointer;
            color: var(--text-secondary);
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 0.9em;
        }
        .plaza-card .actions .action-btn .icon {
            font-size: 1.2em;
        }
        .plaza-card .actions .action-btn.liked .icon {
            color: var(--danger-color);
        }

        /* FAB (Floating Action Button) */
        .fab {
            position: fixed;
            bottom: 80px;
            right: 20px;
            width: 55px;
            height: 55px;
            background-color: var(--primary-color);
            color: white;
            border-radius: 50%;
            border: none;
            font-size: 36px;
            line-height: 55px;
            text-align: center;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            cursor: pointer;
            z-index: 1001;
            display: none; /* Controlled by JS */
            transition: transform 0.2s;
        }
        .fab:active {
            transform: scale(0.9);
        }

        /* --- STAGE 2: DETAIL PAGE BEAUTIFICATION --- */

        /* Detail Page Header */
        .detail-header {
            display: flex;
            align-items: center;
            padding: 10px 15px;
            background-color: var(--card-background);
            border-bottom: 1px solid var(--border-color);
            position: sticky;
            top: 0;
            z-index: 101;
        }
        .detail-header .back-button {
            font-size: 1.5em; /* Larger tap target */
            color: var(--text-secondary);
            text-decoration: none;
            margin-right: 10px;
            padding: 5px;
        }
        .detail-header .title {
            font-size: 1.1em;
            font-weight: 600;
            color: var(--text-primary);
        }

        /* Detail Page Content Area */
        .detail-content {
            padding: 20px 15px;
            background-color: var(--background-color);
        }
        
        /* The header card inside the detail content */
        .detail-card-header {
            background-color: var(--card-background);
            border-radius: 12px;
            padding: 20px;
            margin: -5px 0 20px 0; /* Pull up slightly to overlap with padding */
            border: 1px solid var(--border-color);
        }
        .detail-card-header .title {
            font-size: 1.4em;
            font-weight: 600;
            margin-bottom: 8px;
        }
        .detail-card-header .salary {
            font-size: 1.2em;
            font-weight: 600;
            color: var(--accent-color);
            margin-bottom: 12px;
        }
        .detail-card-header .meta {
            font-size: 0.9em;
            color: var(--text-secondary);
        }
        .detail-card-header .tags {
            margin-top: 15px;
        }
        .detail-card-header .tags .tag {
             background-color: var(--primary-light);
            color: var(--primary-color);
            font-weight: 500;
            font-size: 0.8em;
            padding: 4px 10px;
            border-radius: 20px;
        }

        /* Content Sections (e.g., "职位描述") */
        .detail-section {
            background-color: var(--card-background);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 15px;
            border: 1px solid var(--border-color);
        }
        .detail-section h2 {
            font-size: 1.1em;
            font-weight: 600;
            margin-bottom: 15px;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 10px;
        }
        .detail-section p, .detail-section ul {
            font-size: 1em;
            line-height: 1.7;
            color: var(--text-primary);
        }
        .detail-section ul {
            padding-left: 20px;
        }
        
        /* Sticky Footer with Actions */
        .detail-footer {
            position: sticky;
            bottom: 0;
            left: 0;
            width: 100%;
            background-color: var(--card-background);
            padding: 12px 20px;
            padding-bottom: calc(12px + env(safe-area-inset-bottom));
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.05);
            display: flex;
            gap: 15px;
            z-index: 102;
            border-top: 1px solid var(--border-color);
        }
        .btn-action {
            flex-grow: 1;
            padding: 12px;
            font-size: 1em;
            font-weight: 600;
            border-radius: 8px;
            border: 1px solid var(--primary-color);
            background-color: var(--primary-light);
            color: var(--primary-color);
            cursor: pointer;
            transition: background-color 0.2s, transform 0.2s;
        }
        .btn-action:active {
             transform: scale(0.97);
        }
        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }
        .btn-primary:active {
             transform: scale(0.97);
        }

        /* --- STAGE 3: FORM & MODAL BEAUTIFICATION --- */

        /* Login, Profile Completion, and Post Pages */
        #login-page, #complete-profile-page, #post-page {
            background-color: var(--card-background);
        }
        
        /* General Form Styling */
        .form-container, .profile-form-container {
            width: 100%;
            max-width: 400px;
            padding: 20px;
            margin: 0 auto;
        }

        #login-page h1, #complete-profile-page h1 {
            font-size: 1.8em;
            font-weight: 600;
            text-align: center;
            margin-bottom: 30px;
            color: var(--text-primary);
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--text-secondary);
        }

        .form-group input[type="text"],
        .form-group input[type="password"],
        .form-group input[type="tel"],
        .form-group input[type="number"],
        .form-group textarea {
            width: 100%;
            padding: 12px 15px;
            font-size: 1em;
            border-radius: 8px;
            border: 1px solid var(--border-color);
            background-color: var(--background-color);
            transition: border-color 0.2s, box-shadow 0.2s;
        }
        .form-group input:focus, .form-group textarea:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px var(--primary-light);
        }

        .form-group textarea {
            height: 120px;
            resize: vertical;
        }
        
        /* Buttons */
        .btn-submit, .btn-login {
            width: 100%;
            padding: 15px;
            border: none;
            border-radius: 8px;
            background-color: var(--primary-color);
            color: white;
            font-size: 1.1em;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.2s, transform 0.2s;
        }
        .btn-submit:active, .btn-login:active {
            transform: scale(0.98);
            background-color: #2B6CB0; /* Darker blue */
        }

        /* Specific Page Adjustments */
        #login-page .form-toggle-link {
            margin-top: 25px;
            text-align: center;
            font-size: 0.9em;
            color: var(--primary-color);
            cursor: pointer;
            text-decoration: underline;
        }
         #login-page .terms {
            font-size: 0.8em;
            color: var(--text-secondary);
            text-align: center;
            margin-top: 20px;
            line-height: 1.4;
        }
         #login-page .terms a {
            color: var(--primary-color);
            text-decoration: none;
        }
        .avatar-uploader {
            margin-bottom: 30px;
        }
        .avatar-placeholder {
            width: 90px;
            height: 90px;
            border-radius: 50%;
            background-color: var(--primary-light);
            color: var(--primary-color);
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1.2em;
            margin: 0 auto 10px;
            cursor: pointer;
            border: 2px dashed var(--primary-color);
        }
        .avatar-uploader p {
            font-size: 0.9em;
            color: var(--text-secondary);
        }
        
        /* Modal Action Sheet */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(45, 55, 72, 0.6);
            display: none; /* Hidden by default */
            justify-content: center;
            align-items: flex-end;
            z-index: 1002;
            transition: opacity 0.2s;
        }
        .modal-overlay.show {
            display: flex;
        }
        .action-sheet {
            width: 100%;
            background: var(--background-color);
            border-top-left-radius: 16px;
            border-top-right-radius: 16px;
            padding: 10px;
            padding-bottom: calc(10px + env(safe-area-inset-bottom));
            transform: translateY(0);
            transition: transform 0.25s ease-out;
        }
        .action-sheet button {
            display: block;
            width: 100%;
            padding: 16px;
            background: var(--card-background);
            border: none;
            border-radius: 12px;
            font-size: 1.1em;
            margin-bottom: 8px;
            cursor: pointer;
            color: var(--text-primary);
            font-weight: 500;
        }
        .action-sheet button.cancel {
            margin-top: 10px;
            margin-bottom: 0;
            color: var(--danger-color);
            font-weight: 600;
        }
        .action-sheet button:active {
            background-color: #EDF2F7; /* A light gray for tap feedback */
        }

        /* Back to Top Button remains the same */
        .btn-back-to-top {
            display: none;
            position: fixed;
            bottom: 80px; /* Adjust to avoid footer bar on detail pages */
            right: 20px;
            width: 45px;
            height: 45px;
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            border: none;
            border-radius: 50%;
            font-size: 20px;
            text-align: center;
            line-height: 45px;
            cursor: pointer;
            z-index: 1000;
        }
        .btn-back-to-top.show {
            display: block;
        }
        .inline-comment-section { /* Old comment styles */
            display: none;
        }
        .comment-container {
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #f0f0f0;
        }
        .comment-list-inline .comment-item-inline {
            font-size: 0.9em;
            margin-bottom: 8px;
        }
        .comment-item-inline .comment-user-inline {
            font-weight: bold;
            color: #007aff;
            margin-right: 5px;
        }
        .comment-item-inline .comment-text-inline {
            color: #555;
        }
        .view-more-comments {
            background: none;
            border: none;
            color: #888;
            cursor: pointer;
            font-size: 0.9em;
            padding: 5px 0;
            margin-bottom: 10px;
        }
        .comment-form-inline {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        .comment-form-inline .comment-inline-input {
            flex-grow: 1;
            border: 1px solid #ddd;
            background-color: #f7f7f7;
            border-radius: 15px;
            padding: 8px 12px;
            font-size: 0.9em;
        }
        .comment-form-inline .btn-post-inline-comment {
             flex-shrink: 0;
             border: none;
             background-color: #007aff;
             color: white;
             border-radius: 15px;
             padding: 8px 15px;
             font-size: 0.9em;
             cursor: pointer;
        }
        .plaza-card .actions .action-btn.liked .icon {
            color: var(--danger-color);
        }

    </style>
</head>
<body>

    <!-- Page 1: Login/Register (now for on-demand use) -->
    <section id="login-page" class="page">
        <div class="login-container">
            <!-- Back button functionality will be context-dependent -->
            <a href="#" id="back-from-login" class="back-link">&lt; 返回</a>
            <h1 id="login-title">手机号登录</h1>
            <div class="input-group">
                <input type="tel" id="phone-input" placeholder="请输入手机号" maxlength="11">
            </div>
            <div class="input-group">
                <input type="password" id="password-input" placeholder="请输入密码">
            </div>
            <div class="input-group" id="confirm-password-group" style="display: none;">
                <input type="password" id="confirm-password-input" placeholder="请再次输入密码">
            </div>
            <button id="btn-auth-action" class="btn-login">登录</button>
            <p class="terms" id="login-terms">
                登录/注册即代表您同意<a href="#">《用户协议》</a>和<a href="#">《隐私政策》</a>
            </p>
            <div id="form-toggle-link" class="form-toggle-link" data-mode="login">没有账户？立即注册</div>
        </div>
    </section>

    <!-- Page 2: Main Application -->
    <section id="main-page" class="page active">
        <header>
            <div class="tabs">
                <button id="tab-jobs" class="tab-button">招聘信息</button>
                <button id="tab-plaza" class="tab-button">找活广场</button>
                <button id="tab-talents" class="tab-button">求职人才</button>
            </div>
        </header>
        <main>
            <div id="jobs-view" class="content-view">
                <!-- Job listings will be injected here -->
            </div>
            <div id="plaza-view" class="content-view">
                <!-- Plaza posts will be injected here -->
            </div>
            <div id="talents-view" class="content-view">
                <!-- Talent profiles will be injected here -->
            </div>
        </main>
    </section>
    
    <!-- Page 3: Job Detail -->
    <section id="jobDetail-page" class="page">
        <header class="detail-header">
            <a href="#" class="back-button" data-target="main">&lt;</a>
            <span class="title">职位详情</span>
        </header>
        <main class="detail-content" id="job-detail-content">
            <!-- Job detail will be injected here -->
        </main>
        <footer class="detail-footer">
            <button class="btn-action" data-action="collect">收藏</button>
            <button class="btn-action btn-primary" data-action="contact">立即沟通</button>
        </footer>
    </section>

    <!-- Page 4: Talent Detail -->
    <section id="talentDetail-page" class="page">
        <header class="detail-header">
            <a href="#" class="back-button" data-target="main">&lt;</a>
            <span class="title">人才主页</span>
        </header>
        <main class="detail-content" id="talent-detail-content">
            <!-- Talent detail will be injected here -->
        </main>
        <footer class="detail-footer">
            <button class="btn-action" data-action="collect">收藏</button>
            <button class="btn-action btn-primary" data-action="contact">立即沟通</button>
        </footer>
    </section>

    <!-- Page 5: Post Form -->
    <section id="post-page" class="page">
        <header class="detail-header">
            <a href="#" class="back-button" data-target="main">&lt;</a>
            <span class="title" id="post-page-title">发布</span>
        </header>
        <main class="detail-content">
            <div id="post-form-container">
                <!-- Dynamic form fields will be injected here -->
            </div>
        </main>
    </section>

    <!-- Page 6: Complete Profile (after first login) -->
    <section id="complete-profile-page" class="page">
        <div class="profile-form-container">
            <h1>完善个人信息</h1>
            <div class="avatar-uploader">
                <div class="avatar-placeholder">头像</div>
                <p>点击设置头像</p>
            </div>
            <div class="form-group" style="text-align: left;">
                <label for="profile-name">昵称</label>
                <input type="text" id="profile-name" placeholder="请输入你的昵称">
            </div>
            <button id="btn-save-profile" class="btn-submit">完成，进入应用</button>
        </div>
    </section>

    <button id="btn-back-to-top" class="btn-back-to-top">↑</button>
    <button id="fab-post" class="fab">+</button>

    <div id="post-options-modal" class="modal-overlay">
        <div class="action-sheet">
            <button data-post-type="job">发布招聘</button>
            <button data-post-type="plaza">发布找活信息</button>
            <button data-post-type="talent">完善我的简历</button>
            <button class="cancel" data-action="cancel">取消</button>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- Page Elements ---
            const pages = {
                login: document.getElementById('login-page'),
                main: document.getElementById('main-page'),
                jobDetail: document.getElementById('jobDetail-page'),
                talentDetail: document.getElementById('talentDetail-page'),
                post: document.getElementById('post-page'),
                completeProfile: document.getElementById('complete-profile-page'),
            };

            // Login page elements
            const backFromLogin = document.getElementById('back-from-login');
            const phoneInput = document.getElementById('phone-input');
            const passwordInput = document.getElementById('password-input');
            const confirmPasswordGroup = document.getElementById('confirm-password-group');
            const confirmPasswordInput = document.getElementById('confirm-password-input');
            const btnAuthAction = document.getElementById('btn-auth-action');
            const formToggleLink = document.getElementById('form-toggle-link');
            const loginTerms = document.getElementById('login-terms');

            // Main app elements
            const tabJobs = document.getElementById('tab-jobs');
            const tabTalents = document.getElementById('tab-talents');
            const jobsView = document.getElementById('jobs-view');
            const talentsView = document.getElementById('talents-view');
            
            const tabPlaza = document.getElementById('tab-plaza');
            const plazaView = document.getElementById('plaza-view');

            // Detail page elements
            const jobDetailContent = document.getElementById('job-detail-content');
            const talentDetailContent = document.getElementById('talent-detail-content');
            const backToTopButton = document.getElementById('btn-back-to-top');

            // Post feature elements
            const fabPost = document.getElementById('fab-post');
            const postOptionsModal = document.getElementById('post-options-modal');
            const postPageTitle = document.getElementById('post-page-title');
            const postFormContainer = document.getElementById('post-form-container');

            // Complete Profile page elements
            const btnSaveProfile = document.getElementById('btn-save-profile');

            // Auth page elements
            const loginTitle = document.getElementById('login-title');

            // --- State ---
            let isLoggedIn = false; // Simplified login state
            let lastActivePage = 'main'; // To return to after login
            let pendingAction = null; // To perform after login
            let currentPostType = null;
            let authMode = 'login'; // 'login' or 'register'

            // --- Sample Data ---
            const sampleJobs = [
                {
                    title: '高级前端开发工程师',
                    company: '技术有限公司',
                    location: '上海',
                    salary: '25-45K·14薪',
                    tags: ['React', 'TypeScript', 'Node.js', '5-10年'],
                    description: '负责核心产品的Web前端架构设计和开发，推动团队技术成长...',
                    requirements: ['计算机相关专业本科及以上学历', '五年以上前端开发经验', '精通React、Vue等至少一种主流框架', '熟悉Node.js，有全栈开发经验者优先']
                },
                {
                    title: '产品经理',
                    company: '创意无限公司',
                    location: '深圳',
                    salary: '20-40K',
                    tags: ['用户体验', '市场分析', '3-5年'],
                    description: '负责规划产品发展路线图，深度挖掘用户需求，完成产品设计...',
                    requirements: ['3年以上互联网产品经理经验', '熟悉移动端产品设计，有成功案例', '具备优秀的数据分析和逻辑思维能力']
                },
            ];

            const sampleTalents = [
                {
                    name: '张三',
                    role: '求职：全栈工程师',
                    meta: '5年经验 · 本科',
                    age: 28,
                    skills: ['Vue.js', 'Django', 'MySQL', 'AWS'],
                    experience: '<h4>项目A (2020-至今)</h4><p>担任后端开发，使用Django和MySQL构建了一个电商后台管理系统...</p>',
                    education: '毕业于XX大学计算机科学与技术专业'
                },
                {
                    name: '李四',
                    role: '求职：项目经理',
                    meta: '8年经验 · 硕士',
                    age: 32,
                    skills: ['敏捷开发', 'PMP', '团队管理', 'JIRA'],
                    experience: '<h4>项目B (2018-2020)</h4><p>作为项目经理，带领20人团队，负责某金融App的全周期管理...</p>',
                    education: '毕业于YY大学软件工程专业'
                },
            ];

            const samplePlazaPosts = [
                { name: '王师傅', text: '本人是持证电工，有10年经验，家装、工厂用电都精通，想找个稳定或临时的电工活。', tags: ['电工', '10年经验'], likes: 12, comments: 4, 
                  comments_list: [
                    { user: '我', text: '太棒了！' },
                    { user: '王师傅', text: '楼上的，已经私信你了' },
                    { user: '包工头老刘', text: '留个联系方式' },
                    { user: '热心市民张', text: '师傅手艺怎么样？' },
                  ] 
                },
                { name: '李阿姨', text: '想找一份在县城东区的保姆或钟点工工作，会做饭，爱干净，有耐心。', tags: ['保姆', '钟点工'], likes: 25, comments: 1,
                  comments_list: [
                      { user: '宝妈小丽', text: '阿姨你好，怎么联系你？' }
                  ]
                },
                { name: '小张', text: '刚毕业的大学生，会用Office、PS，想找个文员、助理类的工作，学习能力强，能吃苦。', tags: ['文员', '应届生'], likes: 8, comments: 0, comments_list: [] },
            ];

            // --- Navigation Utility ---
            function showPage(pageId) {
                const currentPage = document.querySelector('.page.active');
                if(currentPage) {
                    lastActivePage = currentPage.id.replace('-page', '');
                }
                
                Object.values(pages).forEach(page => page.classList.remove('active'));
                pages[pageId].classList.add('active');

                // Toggle FAB visibility
                if (pageId === 'main') {
                    fabPost.style.display = 'block';
                } else {
                    fabPost.style.display = 'none';
                }

                // Always hide back-to-top on page switch; it reappears on scroll.
                backToTopButton.classList.remove('show');
            }

            // --- Rendering Functions ---
            function renderJobs() {
                jobsView.innerHTML = '';
                sampleJobs.forEach((job, index) => {
                    const jobCard = `
                        <div class="card" data-type="job" data-id="${index}">
                            <div class="card-header">
                                <div class="card-title">${job.title}</div>
                                <div class="card-salary">${job.salary}</div>
                            </div>
                            <div class="card-company">${job.company} · ${job.location}</div>
                            <div class="card-tags">
                                ${job.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                            </div>
                        </div>
                    `;
                    jobsView.innerHTML += jobCard;
                });
            }

            function renderTalents() {
                talentsView.innerHTML = '';
                sampleTalents.forEach((talent, index) => {
                    const talentCard = `
                        <div class="card" data-type="talent" data-id="${index}">
                            <div class="card-header">
                                <div class="card-title">${talent.name}</div>
                                <div class="card-salary">${talent.role}</div>
                            </div>
                            <div class="card-meta">${talent.meta}</div>
                            <div class="card-tags">
                                ${talent.skills.map(skill => `<span class="tag">${skill}</span>`).join('')}
                            </div>
                        </div>
                    `;
                    talentsView.innerHTML += talentCard;
                });
            }
            
            function renderPlaza() {
                plazaView.innerHTML = '';
                samplePlazaPosts.forEach((post, index) => {
                    const plazaCard = `
                        <div class="plaza-card" data-id="${index}">
                            <div class="name">${post.name}</div>
                            <div class="text">${post.text}</div>
                            <div class="tags">
                                ${post.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                            </div>
                            <div class="actions">
                                <button class="action-btn" data-action="like">
                                    <span class="icon">👍</span>
                                    <span>${post.likes}</span>
                                </button>
                                <button class="action-btn" data-action="comment">
                                    <span class="icon">💬</span>
                                    <span>${post.comments}</span>
                                </button>
                            </div>
                            <div class="comment-container" style="display: none;"></div>
                        </div>
                    `;
                    plazaView.innerHTML += plazaCard;
                });
            }

            function renderJobDetail(jobId) {
                const job = sampleJobs[jobId];
                jobDetailContent.innerHTML = `
                    <div class="detail-card-header">
                        <div class="title">${job.title}</div>
                        <div class="salary">${job.salary}</div>
                        <div class="meta">${job.company} · ${job.location}</div>
                        <div class="tags">
                            ${job.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                        </div>
                    </div>
                    <div class="detail-section">
                        <h2>职位描述</h2>
                        <p>${job.description}</p>
                    </div>
                    <div class="detail-section">
                        <h2>任职要求</h2>
                        <ul>${job.requirements.map(r => `<li>${r}</li>`).join('')}</ul>
                    </div>
                `;
            }

            function renderTalentDetail(talentId) {
                const talent = sampleTalents[talentId];
                talentDetailContent.innerHTML = `
                     <div class="detail-card-header">
                        <div class="title">${talent.name}</div>
                        <div class="salary">${talent.role}</div>
                        <div class="meta">${talent.meta}</div>
                        <div class="tags">
                             ${talent.skills.map(skill => `<span class="tag">${skill}</span>`).join('')}
                        </div>
                    </div>
                     <div class="detail-section">
                        <h2>工作经历</h2>
                        ${talent.experience}
                    </div>
                    <div class="detail-section">
                        <h2>教育背景</h2>
                        <p>${talent.education}</p>
                    </div>
                `;
            }

            function renderCommentsForCard(container, postId, showAll) {
                const post = samplePlazaPosts[postId];
                const commentsToShow = showAll ? post.comments_list : post.comments_list.slice(0, 3);

                let commentsHtml = commentsToShow.map(comment => `
                    <div class="comment-item-inline">
                        <span class="comment-user-inline">${comment.user}:</span>
                        <span class="comment-text-inline">${comment.text}</span>
                    </div>
                `).join('');

                if (commentsToShow.length === 0) {
                    commentsHtml = '<div>暂无评论</div>';
                }

                let viewMoreHtml = '';
                if (!showAll && post.comments_list.length > 3) {
                    viewMoreHtml = `<button class="view-more-comments">查看全部 ${post.comments_list.length} 条评论</button>`;
                }

                const formHtml = `
                    <div class="comment-form-inline">
                        <input type="text" class="comment-inline-input" placeholder="添加评论...">
                        <button class="btn-post-inline-comment">发布</button>
                    </div>
                `;

                container.innerHTML = `
                    <div class="comment-list-inline">${commentsHtml}</div>
                    ${viewMoreHtml}
                    ${formHtml}
                `;
            }

            function generatePostForm(type) {
                currentPostType = type;
                let formHtml = '';
                let title = '';

                switch (type) {
                    case 'job':
                        title = '发布新招聘';
                        formHtml = `
                            <div class="form-group"><label for="job-title">职位名称</label><input type="text" id="job-title" placeholder="如：前端工程师"></div>
                            <div class="form-group"><label for="job-company">公司名称</label><input type="text" id="job-company" placeholder="如：技术有限公司"></div>
                            <div class="form-group"><label for="job-salary">薪资范围</label><input type="text" id="job-salary" placeholder="如：25-45K·14薪"></div>
                            <div class="form-group"><label for="job-tags">技能要求 (逗号分隔)</label><input type="text" id="job-tags" placeholder="如：React,TypeScript,Node.js"></div>
                            <div class="form-group"><label for="job-desc">职位描述</label><textarea id="job-desc" placeholder="详细描述工作职责..."></textarea></div>
                        `;
                        break;
                    case 'plaza':
                        title = '发布找活信息';
                        formHtml = `
                            <div class="form-group"><label for="plaza-text">详细说明</label><textarea id="plaza-text" placeholder="介绍下你的技能、经验和想找什么样的活..."></textarea></div>
                            <div class="form-group"><label for="plaza-tags">标签 (逗号分隔)</label><input type="text" id="plaza-tags" placeholder="如：电工,10年经验"></div>
                        `;
                        break;
                    case 'talent':
                        title = '完善我的简历';
                        // Let's pre-fill the form if "我" exists
                        const myProfile = sampleTalents.find(t => t.name === '我') || {};
                        formHtml = `
                            <div class="form-group"><label for="talent-name">姓名</label><input type="text" id="talent-name" placeholder="你的姓名" value="${myProfile.name || '我'}"></div>
                            <div class="form-group"><label for="talent-age">年龄</label><input type="number" id="talent-age" placeholder="你的年龄" value="${myProfile.age || ''}"></div>
                            <div class="form-group"><label for="talent-role">期望职位</label><input type="text" id="talent-role" placeholder="如：全栈工程师" value="${myProfile.role || ''}"></div>
                            <div class="form-group"><label for="talent-meta">个人简介</label><input type="text" id="talent-meta" placeholder="如：5年经验 · 本科" value="${myProfile.meta || ''}"></div>
                            <div class="form-group"><label for="talent-skills">技能标签 (逗号分隔)</label><input type="text" id="talent-skills" placeholder="如：Vue,Node.js,MySQL" value="${(myProfile.skills || []).join(',')}"></div>
                            <div class="form-group"><label for="talent-experience">工作经历</label><textarea id="talent-experience" placeholder="介绍你的工作项目和职责...">${myProfile.experience || ''}</textarea></div>
                            <div class="form-group"><label for="talent-education">教育背景</label><textarea id="talent-education" placeholder="你的学校和专业...">${myProfile.education || ''}</textarea></div>
                        `;
                        break;
                }
                
                postPageTitle.textContent = title;
                // Add a submit button with a different text for talent
                if (type === 'talent') {
                    formHtml += `<button class="btn-submit">保存简历</button>`;
                } else {
                    formHtml += `<button class="btn-submit">立即发布</button>`;
                }
                postFormContainer.innerHTML = formHtml;
            }

            // --- Event Listeners ---
            
            // Main list clicks (delegated)
            pages.main.addEventListener('click', (e) => {
                // If an action button inside a card was clicked, do nothing here.
                if (e.target.closest('.action-btn')) {
                    return;
                }

                const card = e.target.closest('.card, .plaza-card');
                if (!card) return;

                const id = card.dataset.id;
                const type = card.dataset.type;

                if (type === 'job') {
                    renderJobDetail(id);
                    showPage('jobDetail');
                } else if (type === 'talent') {
                    renderTalentDetail(id);
                    showPage('talentDetail');
                }
                // No action for plaza cards navigation
            });

            // Unified event listener for all actions within Plaza View
            plazaView.addEventListener('click', e => {
                const target = e.target;

                // Action: Like/Comment button on the card itself
                const actionBtn = target.closest('.action-btn');
                if (actionBtn) {
                    const card = actionBtn.closest('.plaza-card');
                    if (!card) return;
                    const postId = card.dataset.id;
                    const action = actionBtn.dataset.action;

                    if (action === 'like') {
                        const countSpan = actionBtn.querySelector('span:last-child');
                        let count = parseInt(countSpan.textContent, 10);
                        if (actionBtn.classList.toggle('liked')) {
                            countSpan.textContent = count + 1;
                        } else {
                            countSpan.textContent = count - 1;
                        }
                        return; // Exit after handling
                    }

                    if (action === 'comment') {
                        const commentContainer = card.querySelector('.comment-container');
                        if (commentContainer.style.display === 'block') {
                            commentContainer.style.display = 'none';
                        } else {
                            if (commentContainer.innerHTML === '') { // Only render if empty
                                renderCommentsForCard(commentContainer, postId, false);
                            }
                            commentContainer.style.display = 'block';
                        }
                        return; // Exit after handling
                    }
                }

                // Actions within an expanded comment container
                const card = target.closest('.plaza-card');
                if (!card) return;
                const postId = card.dataset.id;
                const commentContainer = card.querySelector('.comment-container');

                // Action: View More Comments
                if (target.classList.contains('view-more-comments')) {
                    renderCommentsForCard(commentContainer, postId, true);
                    return; // Exit after handling
                }

                // Action: Post a new comment
                if (target.classList.contains('btn-post-inline-comment')) {
                    const input = card.querySelector('.comment-inline-input');
                    const commentText = input.value.trim();
                    if (commentText === '') return;

                    const postData = samplePlazaPosts[postId];
                    const newComment = { user: '我', text: commentText };
                    postData.comments_list.unshift(newComment);
                    postData.comments = postData.comments_list.length;

                    // Re-render the comments section, showing all comments including the new one
                    renderCommentsForCard(commentContainer, postId, true);

                    // Update the comment count on the main action button
                    const commentCountSpan = card.querySelector('.action-btn[data-action="comment"] span:last-child');
                    if (commentCountSpan) {
                        commentCountSpan.textContent = postData.comments;
                    }
                }
            });

            // Back buttons
            document.querySelectorAll('.back-button').forEach(button => {
                button.addEventListener('click', (e) => {
                    e.preventDefault();
                    const targetPage = e.target.dataset.target;
                    showPage(targetPage || 'main');
                });
            });

            // Tab Switching in Main App
            function showJobsView() {
                tabJobs.classList.add('active');
                tabTalents.classList.remove('active');
                tabPlaza.classList.remove('active');
                jobsView.classList.add('active');
                talentsView.classList.remove('active');
                plazaView.classList.remove('active');
            }

            function showTalentsView() {
                tabTalents.classList.add('active');
                tabJobs.classList.remove('active');
                tabPlaza.classList.remove('active');
                talentsView.classList.add('active');
                jobsView.classList.remove('active');
                plazaView.classList.remove('active');
            }

            function showPlazaView() {
                tabPlaza.classList.add('active');
                tabJobs.classList.remove('active');
                tabTalents.classList.remove('active');
                plazaView.classList.add('active');
                jobsView.classList.remove('active');
                talentsView.classList.remove('active');
            }

            tabJobs.addEventListener('click', showJobsView);
            tabTalents.addEventListener('click', showTalentsView);
            tabPlaza.addEventListener('click', showPlazaView);

            // Auth Logic
            formToggleLink.addEventListener('click', () => {
                if (authMode === 'login') {
                    authMode = 'register';
                    loginTitle.textContent = '手机号注册';
                    btnAuthAction.textContent = '注册';
                    loginTerms.style.display = 'none';
                    confirmPasswordGroup.style.display = 'block';
                    formToggleLink.textContent = '已有账户？立即登录';
                } else {
                    authMode = 'login';
                    loginTitle.textContent = '手机号登录';
                    btnAuthAction.textContent = '登录';
                    loginTerms.style.display = 'block';
                    confirmPasswordGroup.style.display = 'none';
                    formToggleLink.textContent = '没有账户？立即注册';
                }
            });

            btnAuthAction.addEventListener('click', () => {
                const phone = phoneInput.value;
                const password = passwordInput.value;
                if (phone.length !== 11 || password.length < 6) {
                    alert('请输入有效的手机号和至少6位的密码');
                    return;
                }

                if (authMode === 'register') {
                    const confirmPassword = confirmPasswordInput.value;
                    if (password !== confirmPassword) {
                        alert('两次输入的密码不一致');
                        return;
                    }
                    // Simulate successful registration
                    isLoggedIn = true;
                    // For new users, always force profile completion
                    showPage('completeProfile');
                } else { // Login mode
                    // Simulate successful login
                    isLoggedIn = true;
                    alert('登录成功！');
                    // For existing users, check for pending actions or go back
                    if (pendingAction === 'showPostOptions') {
                        postOptionsModal.classList.add('show');
                        pendingAction = null;
                    } else if (lastActivePage && lastActivePage !== 'login') {
                        showPage(lastActivePage);
                    } else {
                        showPage('main');
                    }
                }
            });

            // Complete Profile Logic
            btnSaveProfile.addEventListener('click', () => {
                const profileName = document.getElementById('profile-name').value;

                if (!profileName) {
                    alert('请填写昵称');
                    return;
                }
                
                // Simulate saving profile data
                console.log('Profile Saved:', { name: profileName });

                alert('信息完善成功！');

                // After completing profile, go to where they originally wanted to go
                if (pendingAction === 'showPostOptions') {
                    postOptionsModal.classList.add('show');
                    pendingAction = null;
                } else if (lastActivePage && lastActivePage !== 'login' && lastActivePage !== 'completeProfile') {
                    showPage(lastActivePage);
                } else {
                    showPage('main');
                }
            });

            // Back to Top Logic
            document.querySelectorAll('.page main').forEach(mainEl => {
                mainEl.addEventListener('scroll', () => {
                    if (mainEl.scrollTop > 200) {
                        backToTopButton.classList.add('show');
                    } else {
                        backToTopButton.classList.remove('show');
                    }
                });
            });

            backToTopButton.addEventListener('click', () => {
                const activeMain = document.querySelector('.page.active main');
                if (activeMain) {
                    activeMain.scrollTo({ top: 0, behavior: 'smooth' });
                }
            });

            // Post Feature Logic
            fabPost.addEventListener('click', () => {
                if (isLoggedIn) {
                    postOptionsModal.classList.add('show');
                } else {
                    pendingAction = 'showPostOptions';
                    showPage('login');
                }
            });

            postOptionsModal.addEventListener('click', (e) => {
                const button = e.target.closest('button');
                // If click is on the overlay (but not on a button), hide the modal
                if (e.target === postOptionsModal) {
                    postOptionsModal.classList.remove('show');
                    return;
                }

                if (!button) return; // Ignore clicks inside action sheet that are not on buttons

                const postType = button.dataset.postType;

                if (postType) {
                    generatePostForm(postType);
                    showPage('post');
                }
                
                // Always hide modal after any button action (including cancel)
                postOptionsModal.classList.remove('show');
            });
            
            postFormContainer.addEventListener('click', (e) => {
                if (!e.target.classList.contains('btn-submit')) return;

                e.preventDefault(); // Prevent potential form submission
                
                switch(currentPostType) {
                    case 'job':
                        const newJob = {
                            title: document.getElementById('job-title').value || '未填写职位',
                            company: document.getElementById('job-company').value || '未填写公司',
                            location: '本地',
                            salary: document.getElementById('job-salary').value || '面议',
                            tags: (document.getElementById('job-tags').value || '').split(',').map(t => t.trim()),
                            description: document.getElementById('job-desc').value || '暂无描述',
                            requirements: []
                        };
                        sampleJobs.unshift(newJob);
                        renderJobs();
                        showJobsView();
                        break;
                    case 'plaza':
                         const newPlaza = {
                            name: '我',
                            text: document.getElementById('plaza-text').value || '未填写内容',
                            tags: (document.getElementById('plaza-tags').value || '').split(',').map(t => t.trim()),
                            likes: 0,
                            comments: 0,
                            comments_list: []
                        };
                        samplePlazaPosts.unshift(newPlaza);
                        renderPlaza();
                        showPlazaView();
                        break;
                    case 'talent':
                        const newTalentData = {
                            name: document.getElementById('talent-name').value || '我',
                            age: document.getElementById('talent-age').value || null,
                            role: document.getElementById('talent-role').value || '未填写',
                            meta: document.getElementById('talent-meta').value || '未填写',
                            skills: (document.getElementById('talent-skills').value || '').split(',').filter(t => t).map(t => t.trim()),
                            experience: document.getElementById('talent-experience').value || '暂无经历',
                            education: document.getElementById('talent-education').value || '暂无教育信息'
                        };
                        
                        const existingTalentIndex = sampleTalents.findIndex(t => t.name === '我');
                        if (existingTalentIndex !== -1) {
                            // Update existing profile
                            sampleTalents[existingTalentIndex] = newTalentData;
                        } else {
                            // Add new profile
                            sampleTalents.unshift(newTalentData);
                        }

                        renderTalents();
                        showPage('main');
                        showTalentsView(); // Switch to the talent tab
                        alert('简历保存成功！');
                        return; // Exit here to avoid the generic success alert
                }
                
                alert('发布成功！');
                showPage('main');
            });

            // --- Initial Setup ---
            function init() {
                renderJobs();
                renderTalents();
                renderPlaza();
                showJobsView();
                // Start on the main page
                pages.main.classList.add('active');
                fabPost.style.display = 'block'; // Show FAB on initial load

                // Back to Top Logic
                document.querySelectorAll('.page main').forEach(mainEl => {
                    mainEl.addEventListener('scroll', () => {
                        if (mainEl.scrollTop > 200) {
                            backToTopButton.classList.add('show');
                        } else {
                            backToTopButton.classList.remove('show');
                        }
                    });
                });
            }

            init();
        });
    </script>

</body>
</html> 